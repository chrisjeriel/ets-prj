SET SERVEROUTPUT ON
DECLARE  
        p_ceding_id         ACIT_PROFCOMM_SUMM.CEDING_ID%TYPE := '001';
        p_profcomm_mm       ACIT_PROFCOMM_SUMM.PROFCOMM_MM%TYPE := 6;
        p_profcomm_yr       ACIT_PROFCOMM_SUMM.PROFCOMM_YEAR%TYPE := 2019;
        v_profcomm_id       ACIT_PROFCOMM_DTL.PROFCOMM_ID%TYPE;
        v_quota_shr         ACIT_PROFCOMM_DTL.ACTUAL_AMT%TYPE;
        v_natcat_amt        ACIT_PROFCOMM_DTL.NATCAT_AMT%TYPE;
        v_ri_comm           ACIT_PROFCOMM_DTL.ACTUAL_AMT%TYPE;
        v_ri_comm_natcat    ACIT_PROFCOMM_DTL.NATCAT_AMT%TYPE;
        v_vat_comm          ACIT_PROFCOMM_DTL.ACTUAL_AMT%TYPE;      
        v_vat_comm_natcat   ACIT_PROFCOMM_DTL.NATCAT_AMT%TYPE;    
        v_tot_income        ACIT_PROFCOMM_SUMM.TOTAL_INCOME%TYPE := 0;
        v_tot_outgo         ACIT_PROFCOMM_SUMM.TOTAL_OUTGO%TYPE := 0;
                  
        TYPE particulars_type IS TABLE OF VARCHAR2(20);
        TYPE profcomm_dtl_type IS TABLE OF ACIT_PROFCOMM_DTL%ROWTYPE INDEX BY BINARY_INTEGER;
        particulars_arr particulars_type;
        profcomm_arr    profcomm_dtl_type;
    BEGIN
        particulars_arr := particulars_type('NET PREMIUM WRITTEN','UNEARNED','MANAGEMENT EXPENSES', 'RI COMM', 'VAT COMM');
        SELECT ACIT_PROFCOMM_SEQ.nextval INTO v_profcomm_id
           FROM DUAL;
        
        SELECT ACIT_PROFCOMM_PKG.get_act_quota_shr(p_ceding_id,p_profcomm_mm,p_profcomm_yr,'ACTUAL'), 
               ACIT_PROFCOMM_PKG.get_act_quota_shr(p_ceding_id,p_profcomm_mm,p_profcomm_yr,'NATCAT'),
               ACIT_PROFCOMM_PKG.get_ri_comm(p_ceding_id,p_profcomm_mm,p_profcomm_yr,'ACTUAL'),
               ACIT_PROFCOMM_PKG.get_ri_comm(p_ceding_id,p_profcomm_mm,p_profcomm_yr,'NATCAT'),
               ACIT_PROFCOMM_PKG.get_vat_comm(p_ceding_id,p_profcomm_mm,p_profcomm_yr,'ACTUAL'),
               ACIT_PROFCOMM_PKG.get_vat_comm(p_ceding_id,p_profcomm_mm,p_profcomm_yr,'NATCAT')
        INTO v_quota_shr,v_natcat_amt,v_ri_comm,v_ri_comm_natcat,v_vat_comm,v_vat_comm_natcat
               FROM DUAL;
                                
        FOR i IN particulars_arr.FIRST .. particulars_arr.LAST LOOP 
            profcomm_arr(i).PARTICULARS := particulars_arr( i);
            profcomm_arr(i).ITEM_NO     :=  i;
           
            CASE i
                WHEN 1 THEN
                    profcomm_arr(i).ACTUAL_AMT := v_quota_shr;
                    profcomm_arr(i).NATCAT_AMT := v_natcat_amt;
                    profcomm_arr(i).INCOME     := v_quota_shr - v_natcat_amt;
                    profcomm_arr(i).OUTGO      := 0;
                WHEN 2 THEN
                    profcomm_arr(i).ACTUAL_AMT := .40 * v_quota_shr;
                    profcomm_arr(i).NATCAT_AMT := .40 * v_natcat_amt;
                    profcomm_arr(i).INCOME     := 0;
                    profcomm_arr(i).OUTGO      := .40 * (v_quota_shr - v_natcat_amt);
                WHEN 3 THEN
                    profcomm_arr(i).ACTUAL_AMT := 0;
                    profcomm_arr(i).NATCAT_AMT := 0;
                    profcomm_arr(i).INCOME     := 0;
                    profcomm_arr(i).OUTGO      := .15 * (v_quota_shr - v_natcat_amt);
                WHEN 4 THEN
                    profcomm_arr(i).ACTUAL_AMT := v_ri_comm;
                    profcomm_arr(i).NATCAT_AMT := v_ri_comm_natcat;
                    profcomm_arr(i).INCOME     := 0;
                    profcomm_arr(i).OUTGO      := v_ri_comm - v_ri_comm_natcat;
                WHEN 5 THEN
                    profcomm_arr(i).ACTUAL_AMT := v_vat_comm;
                    profcomm_arr(i).NATCAT_AMT := v_vat_comm_natcat;
                    profcomm_arr(i).INCOME     := 0;
                    profcomm_arr(i).OUTGO      := v_vat_comm - v_vat_comm_natcat;
                ELSE
                    NULL;
            END CASE;
            
        END LOOP;
        
        FORALL i IN profcomm_arr.FIRST..profcomm_arr.LAST 
            INSERT INTO ACIT_PROFCOMM_DTL(PROFCOMM_ID,ITEM_NO,PARTICULARS,ACTUAL_AMT,NATCAT_AMT,INCOME,OUTGO,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
            VALUES (v_profcomm_id,profcomm_arr(i).ITEM_NO,profcomm_arr(i).PARTICULARS,profcomm_arr(i).ACTUAL_AMT,profcomm_arr(i).NATCAT_AMT, profcomm_arr(i).INCOME,
                   profcomm_arr(i).OUTGO,'ENGEL',SYSDATE,'ENGEL',SYSDATE);
        
        SELECT SUM(INCOME),SUM(OUTGO) 
           INTO v_tot_income,v_tot_outgo
           FROM ACIT_PROFCOMM_DTL
           WHERE PROFCOMM_ID= v_profcomm_id;
           
        INSERT INTO ACIT_PROFCOMM_SUMM(                                                  PROFCOMM_ID,CEDING_ID,PROFCOMM_MM,PROFCOMM_YEAR,PROFIT_LOSS_AMT,TOTAL_INCOME,TOTAL_OUTGO,LOSS_CARRY,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
            VALUES (v_profcomm_id,p_ceding_id,p_profcomm_mm,p_profcomm_yr,0,v_tot_income,v_tot_outgo,0,
                  'ENGEL',SYSDATE,'ENGEL',SYSDATE);
    END;


    SELECT  a.TRAN_ID, a.TRAN_CLASS, trunc(a.TRAN_DATE) "TRAN_DATE", a.TRAN_YEAR,
        b.PAYOR, b.AR_STATUS, REFCODE_PKG.get_desc(b.AR_STATUS, 'ACIT_ACKGT_RECEIPT.AR_STATUS') "STATUS_DESC",
        b.PARTICULARS,c.BILL_ID,c.TOTAL_LOCAL_AMT,d.BANK_CHARGE,D.WHTAx_amt,d.INCOME_AMT,d.INVT_ID
    FROM ACIT_TRANSACTIONS a, ACIT_ACKGT_RECEIPT b, ACIT_AR_TRANSUMM c, ACIT_AR_INVPULLOUT d 
    WHERE a.TRAN_ID = b.TRAN_ID
    AND   a.TRAN_TYPE_CD = b.TRAN_TYPE_CD
    AND   a.TRAN_CLASS_NO = b.AR_NO
    AND   b.TRAN_ID = c.TRAN_ID
    AND   b.TRAN_TYPE_CD = c.BILL_TYPE
    AND   c.TRAN_ID = d.TRAN_ID
    AND   c.BILL_ID = d.BILL_ID
    AND   a.TRAN_DATE BETWEEN NVL(:p_mat_date_from, a.TRAN_DATE) AND NVL(:p_mat_date_to, a.TRAN_DATE)
    AND EXTRACT(MONTH from a.TRAN_DATE) = NVL(:p_profcomm_mm, EXTRACT(MONTH from a.TRAN_DATE))
    AND EXTRACT(YEAR from a.TRAN_DATE) = NVL(:p_profcomm_yr,EXTRACT(YEAR from a.TRAN_DATE))
    AND trunc(a.TRAN_DATE) <= NVL(:p_date,trunc(a.TRAN_DATE));
    
    

SELECT * FROM ACIT_TRANSACTIONS
    WHERE TRAN_CLASS = 'AR';
/
SELECT * FROM ACIT_ACKGT_RECEIPT;





    select least(:end_date, trunc(add_months( :start_date, level))) as endmonth
      from dual
    connect by level <= trunc(months_between(trunc( :end_date, 'MON'), trunc( :start_date, 'MON')));
    
   
    select least(:end_date, trunc(add_months( :start_date, 3 * (level - 1) + 3))) as endmonth
      from dual
connect by level <= trunc(months_between(trunc( :end_date, 'Q'), trunc( :start_date, 'Q'))) / 3;

 select least(:end_date, trunc(add_months( :start_date, 6 * (level - 1) + 6))) as endmonth
      from dual
connect by level <= trunc(months_between(:end_date,:start_date)) / 6;

 select least(:end_date, trunc(add_months( :start_date, 12 * (level - 1) + 12))) as endmonth
      from dual
connect by level <= trunc(months_between(:end_date,:start_date)) / 12;


SET SERVEROUTPUT ON
DECLARE
    v_start_date       ACIT_INVT_AMORTIZATION.START_DATE%TYPE;
    v_end_date         ACIT_INVT_AMORTIZATION.END_DATE%TYPE;
    
BEGIN
    NULL;
END;

SET SERVEROUTPUT ON
DECLARE
    v_invt_id       ACIT_INVESTMENTS.INVT_ID%TYPE := 49;
    v_pur_date      ACIT_INVESTMENTS.PURCHASED_DATE%TYPE := '11-APR-2017';
    v_mat_date      ACIT_INVESTMENTS.MATURITY_DATE%TYPE := '11-APR-2020';
    v_int_rt        ACIT_INVESTMENTS.INTEREST_RATE%TYPE := 4.250;
    v_price_par     ACIT_INVESTMENTS.INVT_AMT%TYPE := 14910000; 
    v_price_cost    ACIT_INVESTMENTS.AMORT_INVT_AMT%TYPE := 14994976.67;
    v_eff           ACIT_INVESTMENTS.AMORT_EFF_PCT%TYPE := 4.04729803;
    v_amortized     ACIT_INVESTMENTS.AMORTIZE_UNIT%TYPE := 'Q';
    
    TYPE end_date_typ IS TABLE OF DATE;
    col_end_date end_date_typ;
    
    col_start_date  ACIT_INVESTMENTS.PURCHASED_DATE%TYPE := v_pur_date;
    amort_days      ACIT_INVESTMENTS.MATURITY_PERIOD%TYPE := 0;
    coupon_days     ACIT_INVESTMENTS.MATURITY_PERIOD%TYPE := 0;
    coupon          NUMBER(16,2) := 0;
BEGIN
    IF (v_amortized = 'Q') THEN
        select least(TO_DATE(v_mat_date,'dd-mon-yyyy'), trunc(add_months( TO_DATE(v_pur_date,'dd-mon-yyyy'), 3 * (level - 1) + 3))) BULK COLLECT INTO col_end_date
            from dual
        connect by level <= trunc(months_between(trunc( TO_DATE(v_mat_date,'dd-mon-yyyy'), 'Q'), trunc( TO_DATE(v_pur_date,'dd-mon-yyyy'), 'Q'))) / 3;
        coupon_days := 360/4;
        coupon := (coupon_days/360) * (v_int_rt/100) * v_price_par;
    END IF;
    
       --Print values from the collection--
    FOR idx IN 1..col_end_date.COUNT
    LOOP
    
        SELECT (TO_DATE(col_end_date(idx), 'DD-MM-YYYY') - TO_DATE(col_start_date, 'DD-MM-YYYY')) INTO amort_days
            FROM DUAL;
        DBMS_OUTPUT.PUT_LINE ( col_start_date || ' ' || col_end_date(idx) || ' ' || amort_days || ' ' || coupon_days || ' ' || coupon); 
        col_start_date := col_end_date(idx);
        
    END LOOP;
    
END;

